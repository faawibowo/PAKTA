generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int               @id @default(autoincrement())
  username      String            @unique
  email         String            @unique
  oauthProvider String?
  oauthId       String?
  role          UserRole          @default(INTERNAL)
  password      String
  aiDrafts      AIContractDraft[] @relation("UserAIContractDrafts")
  contracts     Contract[]        @relation("UserContracts")
}

model Contract {
  id           Int                  @id @default(autoincrement())
  title        String
  parties      String
  category     String
  status       ContractStatus
  value        Float
  startDate    DateTime
  endDate      DateTime
  uploadedAt   DateTime             @default(now())
  fileUrl      String
  contractData Json
  userId       Int
  user         User                 @relation("UserContracts", fields: [userId], references: [id])
  validations  ContractValidation[] @relation("ContractValidations")
}

model AIContractDraft {
  id           Int    @id @default(autoincrement())
  companyName  String
  contractType String
  duration     Int
  content      Json
  status       String
  userId       Int
  user         User   @relation("UserAIContractDrafts", fields: [userId], references: [id])
}

model ContractValidation {
  id             Int      @id @default(autoincrement())
  contractId     Int
  riskPercentage    Float?           @default(0)
  overallStatus     ValidationStatus @default(PENDING)
  mandatoryElems Json
  recommendations   String[]
  riskDetected      Json             // Keep for full risk objects
  highRisks         Int              @default(0)  // Count of high risks
  mediumRisks       Int              @default(0)  // Count of medium risks
  lowRisks          Int              @default(0)   // Count of low risks
  analysisDate   DateTime @default(now())
  validationData   Json?
  contract       Contract @relation("ContractValidations", fields: [contractId], references: [id])
}

enum UserRole {
  MANAGEMENT
  LAW
  INTERNAL
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  PENDING
}

enum ValidationStatus {
  PENDING
  VALID      // 0-29% risk
  WARNING    // 30-69% risk  
  HIGH_RISK  // 70-100% risk
  ERROR      // Processing failed
}
